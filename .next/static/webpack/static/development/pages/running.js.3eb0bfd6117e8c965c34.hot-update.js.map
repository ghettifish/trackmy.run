{"version":3,"file":"static/webpack/static/development/pages/running.js.3eb0bfd6117e8c965c34.hot-update.js","sources":["webpack:///./pages/running.tsx"],"sourcesContent":["import Page from \"../templates/Page\";\nimport Link from \"next/link\";\nimport Timer from \"../components/Timer\";\nimport MileCounter from \"../components/MileCounter\";\nimport { useState, useEffect, Dispatch, SetStateAction } from 'react';\n\n\n  \n  function success(pos: any) {\n    var crd = pos.coords;\n  \n    console.log('Your current position is:');\n    console.log(`Latitude : ${crd.latitude}`);\n    console.log(`Longitude: ${crd.longitude}`);\n    console.log(`More or less ${crd.accuracy} meters.`);\n  }\n  \n  function error(err: any) {\n    console.warn(`ERROR(${err.code}): ${err.message}`);\n  }\n  \n\n\nconst getCoordinates: () => Coordinates | null = () => {\n    \n    let response = null;\n    var options = {\n        enableHighAccuracy: true,\n        timeout: 1000,\n        maximumAge: 0\n    };\n\n    function success(pos: any) {\n        let crd = pos.coords;\n        console.log(crd.latitude)\n        response = {\n            lat: crd.latitude,\n            lng: crd.longitude,\n            // utc: Date.now()\n        } as Coordinates\n        return;\n    }\n      \n    function error(err: any) {\n        console.warn(`ERROR(${err.code}): ${err.message}`);\n    }\n\n    navigator.geolocation.getCurrentPosition(success, error, options);\n\n    return response\n}\n\ninterface Coordinates {\n    lat: number;\n    lng: number;\n    utc?: number;\n}\n\ninterface StartStopProps {\n    isRunning: boolean,\n    toggle: Dispatch<SetStateAction<boolean>>\n}\n\nconst StartStop = (props: StartStopProps) => {\n    const { isRunning, toggle } = props;\n    return (\n        isRunning \n            ? <a onClick={() => toggle(false)}>Pause</a>\n            : <a onClick={() => toggle(true)}>Start</a>\n    )\n}\nconst Running = () => {\n    const [coordinates, setCoordinates] = useState([] as Coordinates[]);\n    const [isRunning, setIsRunning] = useState(true);\n\n    useEffect(() => {\n        if(isRunning) {\n            setInterval(() => {\n                const currentPosition = getCoordinates();\n                console.log({currentPosition})\n                if(currentPosition !== null) {\n                    setCoordinates([...coordinates, currentPosition])\n                }\n                //console.log(coordinates);\n\n            }, 1000)\n        } \n    })\n\n    \n\n    return (\n        <Page>\n            <h1>Run!</h1>\n            <MileCounter />\n            <Timer/>\n            <StartStop isRunning={isRunning} toggle={setIsRunning}/>\n            <Link href=\"/finished\"><a>Stop</a></Link>\n        </Page>\n    )\n}\n    \nexport default Running"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAYA;AAAA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;;;;A","sourceRoot":""}
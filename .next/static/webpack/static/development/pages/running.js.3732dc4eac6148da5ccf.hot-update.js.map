{"version":3,"file":"static/webpack/static/development/pages/running.js.3732dc4eac6148da5ccf.hot-update.js","sources":["webpack:///./components/DataField.tsx","webpack:///./components/styles/GlobalStyle.ts","webpack:///./components/styles/Theme.ts","webpack:///./components/styles/theme.ts","webpack:///./pages/running.tsx","webpack:///./templates/Page.tsx"],"sourcesContent":["import styled from \"./styles/Theme\";\n\ninterface Props {\n    label?: string;\n    children?: any;\n}\n\nconst DataField  = (props: Props) => \n    <Styled>\n        <p className=\"label\">{props.label}</p>\n        {props.children}\n    </Styled>\n\nconst Styled = styled.p`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    font-family: sans-serif;\n    font-size: 36px;\n    font-weight: 100;\n    .label {\n        font-size:16px;\n        font-weight: bold;\n        text-transform: uppercase;\n        margin-bottom: 10px;\n    }\n`\n\nexport default DataField;","import {createGlobalStyle} from './theme'\n\nconst GlobalStyle = createGlobalStyle`\n    html {\n        box-sizing: border-box;\n        font-size: 10px;\n    }\n    *, *:before, *:after {\n        box-sizing: inherit;\n    }\n    body {\n        padding: 0px;\n        margin: 0px;\n        font-size: 1.5rem;\n        line-height: 2;\n        font-family: Arial, Helvetica, sans-serif;\n        color: ${props => props.theme.black}\n    }\n    a {\n        text-decoration: none;\n        color: ${props => props.theme.gray};\n    }\n`\n\nexport default GlobalStyle;","import * as styledComponents from 'styled-components';\nimport { ThemedStyledComponentsModule } from 'styled-components';\n\nconst theme = {\n    red: '#FF0000',\n    black: '#393939',\n    lightgrey: '#E1E1E1',\n    offWhite: '#EDEDED',\n    maxWidth: '1000px',\n    boxShadow: '0 12px 24px 0 rgba(0,0,0,0.9)',\n    gray: '#404040',\n};\n\nexport type Theme = typeof theme;\n\nconst {\n    default: styled,\n    css,\n    keyframes,\n    ThemeProvider,\n    createGlobalStyle\n} = (styledComponents as any as ThemedStyledComponentsModule<Theme>)\n\nexport { css, keyframes, ThemeProvider, createGlobalStyle, theme};\nexport default styled;\n","import * as styledComponents from 'styled-components';\nimport { ThemedStyledComponentsModule } from 'styled-components';\n\nconst theme = {\n    red: '#FF0000',\n    black: '#393939',\n    lightgrey: '#E1E1E1',\n    offWhite: '#EDEDED',\n    maxWidth: '1000px',\n    boxShadow: '0 12px 24px 0 rgba(0,0,0,0.9)',\n    gray: '#404040',\n};\n\nexport type Theme = typeof theme;\n\nconst {\n    default: styled,\n    css,\n    keyframes,\n    ThemeProvider,\n    createGlobalStyle\n} = (styledComponents as any as ThemedStyledComponentsModule<Theme>)\n\nexport { css, keyframes, ThemeProvider, createGlobalStyle, theme};\nexport default styled;\n","import Page from \"../templates/Page\";\nimport Link from \"next/link\";\nimport Timer from \"../components/Timer\";\nimport MileCounter from \"../components/MileCounter\";\nimport { useState, useEffect, Dispatch, SetStateAction, useRef } from 'react';\nimport styled from \"../components/styles/theme\";\nimport { computeDistanceBetween, LatLng } from \"spherical-geometry-js\";\nimport Distance from \"../components/Distance\";\nimport Speed from \"../components/Speed\";\n\n\nconst getCoordinates: (arr: Coordinates[], callback: (arr: Coordinates[]) => void) => void = (arr, callback) => {\n    \n    let response = null;\n    var options = {\n        enableHighAccuracy: true,\n        timeout: 1000,\n        maximumAge: 0\n    };\n\n    function success(pos: any) {\n        let crd: Coordinates = pos.coords;\n        console.log(crd);\n        response = {\n            latitude: crd.latitude,\n            longitude: crd.longitude,\n            accuracy: crd.accuracy,\n            altitude: crd.altitude,\n            altitudeAccuracy: crd.altitudeAccuracy,\n            heading: crd.heading,\n            speed: crd.speed,\n            utc: Date.now()\n        } as Coordinates\n        callback([...arr, response]);\n        return;\n    }\n      \n    function error(err: any) {\n        console.warn(`ERROR(${err.code}): ${err.message}`);\n    }\n\n    navigator.geolocation.getCurrentPosition(success, error, options);\n}\n\ninterface Coordinates {\n    latitude: number;\n    longitude: number;\n    utc: number;\n    altitude?: number | null;\n    accuracy?: number;\n    altitudeAccuracy?: number | null;\n    heading?: number | null;\n    speed?: number | null;\n}\n\nconst sampleData: Coordinates[] = [\n    {\n        latitude: 39.0067718,\n        longitude: -105.06114945,\n        utc: 1567956461422\n    },\n    {\n        latitude: 39.0069154,\n        longitude: -105.0603721,\n        utc: 1567956490407\n    },\n    {\n        latitude: 38.9993031,\n        longitude: -105.0402898,\n        utc: 1567958139410\n    }\n]\ninterface StartStopProps {\n    isRunning: boolean,\n    toggle: Dispatch<SetStateAction<boolean>>\n}\n\nconst StartStop = (props: StartStopProps) => {\n    const { isRunning, toggle } = props;\n    return (\n        isRunning \n            ? <Button onClick={() => toggle(false)}>Pause</Button>\n            : <Button onClick={() => toggle(true)}>Start</Button>\n    )\n}\nfunction useInterval(callback: any, delay: any) {\n    const savedCallback = useRef() as any;\n  \n    // Remember the latest callback.\n    useEffect(() => {\n      savedCallback.current = callback;\n    }, [callback]);\n  \n    // Set up the interval.\n    useEffect(() => {\n      function tick() {\n        savedCallback.current();\n      }\n      if (delay !== null) {\n        let id = setInterval(tick, delay);\n        return () => clearInterval(id);\n      }\n    }, [delay]);\n  }\n  const startTime = Date.now();\n\nconst Running = () => {\n    const [coordinates, setCoordinates] = useState([] as Coordinates[]);\n    const [isRunning, setIsRunning] = useState(true);\n    const [duration, setDuration]  = useState(0);\n    const [speed, setSpeed] = useState(0);\n    const [distance, setDistance] = useState(0);\n\n    useInterval(() => {\n        if(isRunning) {\n            getCoordinates(coordinates, setCoordinates);\n            const current = coordinates[coordinates.length-1] && coordinates[coordinates.length-1]\n            const previous = coordinates[coordinates.length-2] && coordinates[coordinates.length-2]\n\n            const currentTime = current && current.utc;\n            if(currentTime) {\n                setDuration((currentTime - startTime) / 1000);\n            }\n\n           \n\n            if(current && previous){\n                const currentDistance = computeDistanceBetween(new LatLng(current.latitude, current.longitude), new LatLng(previous.latitude, previous.longitude));\n                setSpeed((currentDistance / 1609.344) * 60 * 60);\n                \n                setDistance(distance + currentDistance);\n\n            }\n           \n            //console.log(coordinates);\n\n        } \n    }, 1000)\n\n    \n\n    return (\n        <Page>\n            <h1 style={{fontFamily: \"sans-serif\"}}>Run!</h1>\n            <Timer time={duration}/>\n            <Speed speed={speed}/>\n            <Distance meters={distance} />\n            <StartStop isRunning={isRunning} toggle={setIsRunning}/>\n            <Link href=\"/finished\"><ButtonLink>Stop</ButtonLink></Link>\n            <Console>\n            {\n                coordinates.map((x,i) => {\n                    const pointer = coordinates[coordinates.length - 1 -i];\n                    return <LineItem key={pointer.utc}>Lat: {pointer.latitude} | Lng: {pointer.longitude} | UTC: {pointer.utc}</LineItem>\n                })\n            }\n            </Console>\n        </Page>\n    )\n}\n\nconst Button = styled.button`\n    padding: 10px 30px ;\n    border: none;\n    background: orange;\n    margin: 15px;\n    font-family: sans-serif;\n    font-size: 14px;\n`;\n\nconst ButtonLink = styled.a`\n    padding: 10px 30px ;\n    border: none;\n    background: orange;\n    font-family: sans-serif;\n    font-size: 14px;\n`;\nconst Console = styled.ul`\n    background: #16103a;\n    min-height: 500px;\n    max-height: 500px;\n    overflow: scroll;\n    margin-block-start: 0;\n    padding-inline-start: 0;\n`;\nconst LineItem = styled.li`\n    font-size: 8px;\n    color: #fff;\n    list-style-type: none;\n    font-family: monospace;\n    padding: 0;\n`\n\nexport default Running","import { FunctionComponent } from \"react\";\nimport {ThemeProvider} from \"styled-components\";\nimport styled, { createGlobalStyle} from \"../components/styles/theme\";\nimport GlobalStyle from \"../components/styles/GlobalStyle\";\nimport theme from \"../components/styles/theme\";\n\n\nconst Page: FunctionComponent = (props) => \n\n<ThemeProvider theme={theme}>\n                <>\n                    <GlobalStyle />\n                    <div>\n                        {props.children}\n                    </div>\n                </>\n            </ThemeProvider>\n\nexport default Page"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAMA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AACA;AAKA;AAeA;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5BA;AAEA;AAcA;AAAA;AAIA;AAAA;AAIA;;;;;;;;;;;;ACxBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAkBA;AALA;AACA;AACA;AACA;AACA;AAGA;AACA;;;;;;;;;;;;ACxBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAkBA;AALA;AACA;AACA;AACA;AACA;AAGA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxBA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAYA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AACA;AAUA;AAAA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AACA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AACA;AASA;AAOA;AAQA;AAQA;;;;;;;;;;;;;;;;;;;;;AChMA;AAEA;AACA;AACA;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AALA;AACA;AAUA;;;;A","sourceRoot":""}
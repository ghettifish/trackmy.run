{"ast":null,"code":"import _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nvar _jsxFileName = \"/Users/nicbovee/Projects/PrismaDemo/frontend/pages/running.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Page from \"../templates/Page\";\nimport Link from \"next/link\";\nimport Timer from \"../components/Timer\";\nimport { useState, useEffect, useRef } from 'react';\nimport styled from \"../components/styles/theme\";\nimport { computeDistanceBetween, LatLng } from \"spherical-geometry-js\";\nimport Distance from \"../components/Distance\";\nimport Speed from \"../components/Speed\";\n\nconst getCoordinates = (arr, callback) => {\n  let response = null;\n  var options = {\n    enableHighAccuracy: true,\n    timeout: 1000,\n    maximumAge: 0\n  };\n\n  function success(pos) {\n    let crd = pos.coords;\n    console.log(crd);\n    response = {\n      latitude: crd.latitude,\n      longitude: crd.longitude,\n      accuracy: crd.accuracy,\n      altitude: crd.altitude,\n      altitudeAccuracy: crd.altitudeAccuracy,\n      heading: crd.heading,\n      speed: crd.speed,\n      utc: _Date$now()\n    };\n    callback([...arr, response]);\n    return;\n  }\n\n  function error(err) {\n    console.warn(`ERROR(${err.code}): ${err.message}`);\n  }\n\n  navigator.geolocation.getCurrentPosition(success, error, options);\n};\n\nconst sampleData = [{\n  latitude: 39.0067718,\n  longitude: -105.06114945,\n  utc: 1567956461422\n}, {\n  latitude: 39.0069154,\n  longitude: -105.0603721,\n  utc: 1567956490407\n}, {\n  latitude: 38.9993031,\n  longitude: -105.0402898,\n  utc: 1567958139410\n}];\n\nconst StartStop = props => {\n  const {\n    isRunning,\n    toggle\n  } = props;\n  return isRunning ? __jsx(Button, {\n    onClick: () => toggle(false),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, \"Pause\") : __jsx(Button, {\n    onClick: () => toggle(true),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, \"Start\");\n};\n\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef(); // Remember the latest callback.\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]); // Set up the interval.\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nconst startTime = _Date$now();\n\nconst Running = () => {\n  const {\n    0: coordinates,\n    1: setCoordinates\n  } = useState([]);\n  const {\n    0: isRunning,\n    1: setIsRunning\n  } = useState(true);\n  const {\n    0: duration,\n    1: setDuration\n  } = useState(0);\n  const {\n    0: speed,\n    1: setSpeed\n  } = useState(0);\n  const {\n    0: distance,\n    1: setDistance\n  } = useState(0);\n  useInterval(() => {\n    if (isRunning) {\n      getCoordinates(coordinates, setCoordinates);\n      const current = coordinates[coordinates.length - 1] && coordinates[coordinates.length - 1];\n      const previous = coordinates[coordinates.length - 2] && coordinates[coordinates.length - 2];\n      const currentTime = current && current.utc;\n\n      if (currentTime) {\n        setDuration((currentTime - startTime) / 1000);\n      }\n\n      if (current && previous) {\n        const currentDistance = computeDistanceBetween(new LatLng(current.latitude, current.longitude), new LatLng(previous.latitude, previous.longitude));\n        setSpeed(currentDistance / 1609.344 * 60 * 60);\n        setDistance(distance + currentDistance);\n      } //console.log(coordinates);\n\n    }\n  }, 1000);\n  return __jsx(Page, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    style: {\n      fontFamily: \"sans-serif\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, \"Run!\"), __jsx(Timer, {\n    time: duration,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }), __jsx(Speed, {\n    speed: speed,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }), __jsx(Distance, {\n    meters: distance,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }), __jsx(StartStop, {\n    isRunning: isRunning,\n    toggle: setIsRunning,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }), __jsx(Link, {\n    href: \"/finished\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, __jsx(ButtonLink, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, \"Stop\")), __jsx(Console, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, coordinates.map((x, i) => {\n    const pointer = coordinates[coordinates.length - 1 - i];\n    return __jsx(LineItem, {\n      key: pointer.utc,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, \"Lat: \", pointer.latitude, \" | Lng: \", pointer.longitude, \" | UTC: \", pointer.utc);\n  })));\n};\n\nconst Button = styled.button`\n    padding: 10px 30px ;\n    border: none;\n    background: ${props => props.theme.green};\n    margin: 15px;\n    font-family: sans-serif;\n    font-size: 14px;\n`;\nconst ButtonLink = styled.a`\n    padding: 10px 30px ;\n    border: none;\n    background: orange;\n    font-family: sans-serif;\n    font-size: 14px;\n`;\nconst Console = styled.ul`\n    background: #16103a;\n    min-height: 500px;\n    max-height: 500px;\n    overflow: scroll;\n    margin-block-start: 0;\n    padding-inline-start: 0;\n`;\nconst LineItem = styled.li`\n    font-size: 8px;\n    color: #fff;\n    list-style-type: none;\n    font-family: monospace;\n    padding: 0;\n`;\nexport default Running;","map":{"version":3,"sources":["/Users/nicbovee/Projects/PrismaDemo/frontend/pages/running.tsx"],"names":["Page","Link","Timer","useState","useEffect","useRef","styled","computeDistanceBetween","LatLng","Distance","Speed","getCoordinates","arr","callback","response","options","enableHighAccuracy","timeout","maximumAge","success","pos","crd","coords","console","log","latitude","longitude","accuracy","altitude","altitudeAccuracy","heading","speed","utc","error","err","warn","code","message","navigator","geolocation","getCurrentPosition","sampleData","StartStop","props","isRunning","toggle","useInterval","delay","savedCallback","current","tick","id","setInterval","clearInterval","startTime","Running","coordinates","setCoordinates","setIsRunning","duration","setDuration","setSpeed","distance","setDistance","length","previous","currentTime","currentDistance","fontFamily","map","x","i","pointer","Button","button","theme","green","ButtonLink","a","Console","ul","LineItem","li"],"mappings":"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","sourcesContent":["import Page from \"../templates/Page\";\nimport Link from \"next/link\";\nimport Timer from \"../components/Timer\";\nimport MileCounter from \"../components/MileCounter\";\nimport { useState, useEffect, Dispatch, SetStateAction, useRef } from 'react';\nimport styled from \"../components/styles/theme\";\nimport { computeDistanceBetween, LatLng } from \"spherical-geometry-js\";\nimport Distance from \"../components/Distance\";\nimport Speed from \"../components/Speed\";\n\n\nconst getCoordinates: (arr: Coordinates[], callback: (arr: Coordinates[]) => void) => void = (arr, callback) => {\n    \n    let response = null;\n    var options = {\n        enableHighAccuracy: true,\n        timeout: 1000,\n        maximumAge: 0\n    };\n\n    function success(pos: any) {\n        let crd: Coordinates = pos.coords;\n        console.log(crd);\n        response = {\n            latitude: crd.latitude,\n            longitude: crd.longitude,\n            accuracy: crd.accuracy,\n            altitude: crd.altitude,\n            altitudeAccuracy: crd.altitudeAccuracy,\n            heading: crd.heading,\n            speed: crd.speed,\n            utc: Date.now()\n        } as Coordinates\n        callback([...arr, response]);\n        return;\n    }\n      \n    function error(err: any) {\n        console.warn(`ERROR(${err.code}): ${err.message}`);\n    }\n\n    navigator.geolocation.getCurrentPosition(success, error, options);\n}\n\ninterface Coordinates {\n    latitude: number;\n    longitude: number;\n    utc: number;\n    altitude?: number | null;\n    accuracy?: number;\n    altitudeAccuracy?: number | null;\n    heading?: number | null;\n    speed?: number | null;\n}\n\nconst sampleData: Coordinates[] = [\n    {\n        latitude: 39.0067718,\n        longitude: -105.06114945,\n        utc: 1567956461422\n    },\n    {\n        latitude: 39.0069154,\n        longitude: -105.0603721,\n        utc: 1567956490407\n    },\n    {\n        latitude: 38.9993031,\n        longitude: -105.0402898,\n        utc: 1567958139410\n    }\n]\ninterface StartStopProps {\n    isRunning: boolean,\n    toggle: Dispatch<SetStateAction<boolean>>\n}\n\nconst StartStop = (props: StartStopProps) => {\n    const { isRunning, toggle } = props;\n    return (\n        isRunning \n            ? <Button onClick={() => toggle(false)}>Pause</Button>\n            : <Button onClick={() => toggle(true)}>Start</Button>\n    )\n}\nfunction useInterval(callback: any, delay: any) {\n    const savedCallback = useRef() as any;\n  \n    // Remember the latest callback.\n    useEffect(() => {\n      savedCallback.current = callback;\n    }, [callback]);\n  \n    // Set up the interval.\n    useEffect(() => {\n      function tick() {\n        savedCallback.current();\n      }\n      if (delay !== null) {\n        let id = setInterval(tick, delay);\n        return () => clearInterval(id);\n      }\n    }, [delay]);\n  }\n  const startTime = Date.now();\n\nconst Running = () => {\n    const [coordinates, setCoordinates] = useState([] as Coordinates[]);\n    const [isRunning, setIsRunning] = useState(true);\n    const [duration, setDuration]  = useState(0);\n    const [speed, setSpeed] = useState(0);\n    const [distance, setDistance] = useState(0);\n\n    useInterval(() => {\n        if(isRunning) {\n            getCoordinates(coordinates, setCoordinates);\n            const current = coordinates[coordinates.length-1] && coordinates[coordinates.length-1]\n            const previous = coordinates[coordinates.length-2] && coordinates[coordinates.length-2]\n\n            const currentTime = current && current.utc;\n            if(currentTime) {\n                setDuration((currentTime - startTime) / 1000);\n            }\n\n           \n\n            if(current && previous){\n                const currentDistance = computeDistanceBetween(new LatLng(current.latitude, current.longitude), new LatLng(previous.latitude, previous.longitude));\n                setSpeed((currentDistance / 1609.344) * 60 * 60);\n                \n                setDistance(distance + currentDistance);\n\n            }\n           \n            //console.log(coordinates);\n\n        } \n    }, 1000)\n\n    \n\n    return (\n        <Page>\n            <h1 style={{fontFamily: \"sans-serif\"}}>Run!</h1>\n            <Timer time={duration}/>\n            <Speed speed={speed}/>\n            <Distance meters={distance} />\n            <StartStop isRunning={isRunning} toggle={setIsRunning}/>\n            <Link href=\"/finished\"><ButtonLink>Stop</ButtonLink></Link>\n            <Console>\n            {\n                coordinates.map((x,i) => {\n                    const pointer = coordinates[coordinates.length - 1 -i];\n                    return <LineItem key={pointer.utc}>Lat: {pointer.latitude} | Lng: {pointer.longitude} | UTC: {pointer.utc}</LineItem>\n                })\n            }\n            </Console>\n        </Page>\n    )\n}\n\nconst Button = styled.button`\n    padding: 10px 30px ;\n    border: none;\n    background: ${props => props.theme.green};\n    margin: 15px;\n    font-family: sans-serif;\n    font-size: 14px;\n`;\n\nconst ButtonLink = styled.a`\n    padding: 10px 30px ;\n    border: none;\n    background: orange;\n    font-family: sans-serif;\n    font-size: 14px;\n`;\nconst Console = styled.ul`\n    background: #16103a;\n    min-height: 500px;\n    max-height: 500px;\n    overflow: scroll;\n    margin-block-start: 0;\n    padding-inline-start: 0;\n`;\nconst LineItem = styled.li`\n    font-size: 8px;\n    color: #fff;\n    list-style-type: none;\n    font-family: monospace;\n    padding: 0;\n`\n\nexport default Running"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nvar _jsxFileName = \"/Users/nicbovee/Projects/PrismaDemo/frontend/pages/running.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Page from \"../templates/Page\";\nimport Link from \"next/link\";\nimport Timer from \"../components/Timer\";\nimport MileCounter from \"../components/MileCounter\";\nimport { useState, useEffect } from 'react';\n\nvar getCoordinates = function getCoordinates(arr, callback) {\n  var response = null;\n  var options = {\n    enableHighAccuracy: true,\n    timeout: 1000,\n    maximumAge: 0\n  };\n\n  function success(pos) {\n    var crd = pos.coords;\n    response = {\n      lat: crd.latitude,\n      lng: crd.longitude // utc: Date.now()\n\n    };\n    callback([].concat(_toConsumableArray(arr), [response]));\n    return;\n  }\n\n  function error(err) {\n    console.warn(\"ERROR(\".concat(err.code, \"): \").concat(err.message));\n  }\n\n  navigator.geolocation.getCurrentPosition(success, error, options);\n};\n\nvar StartStop = function StartStop(props) {\n  var isRunning = props.isRunning,\n      toggle = props.toggle;\n  return isRunning ? __jsx(\"a\", {\n    onClick: function onClick() {\n      return toggle(false);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, \"Pause\") : __jsx(\"a\", {\n    onClick: function onClick() {\n      return toggle(true);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, \"Start\");\n};\n\nvar Running = function Running() {\n  var _useState = useState([]),\n      coordinates = _useState[0],\n      setCoordinates = _useState[1];\n\n  var _useState2 = useState(true),\n      isRunning = _useState2[0],\n      setIsRunning = _useState2[1];\n\n  useEffect(function () {\n    if (isRunning) {\n      setInterval(function () {\n        var currentPosition = getCoordinates(coordinates, setCoordinates);\n        console.log(coordinates); //console.log(coordinates);\n      }, 5000);\n    }\n  });\n  return __jsx(Page, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, \"Run!\"), __jsx(MileCounter, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }), __jsx(Timer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }), __jsx(StartStop, {\n    isRunning: isRunning,\n    toggle: setIsRunning,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }), __jsx(Link, {\n    href: \"/finished\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, __jsx(\"a\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, \"Stop\")));\n};\n\nexport default Running;","map":{"version":3,"sources":["/Users/nicbovee/Projects/PrismaDemo/frontend/pages/running.tsx"],"names":["Page","Link","Timer","MileCounter","useState","useEffect","getCoordinates","arr","callback","response","options","enableHighAccuracy","timeout","maximumAge","success","pos","crd","coords","lat","latitude","lng","longitude","error","err","console","warn","code","message","navigator","geolocation","getCurrentPosition","StartStop","props","isRunning","toggle","Running","coordinates","setCoordinates","setIsRunning","setInterval","currentPosition","log"],"mappings":"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","sourcesContent":["import Page from \"../templates/Page\";\nimport Link from \"next/link\";\nimport Timer from \"../components/Timer\";\nimport MileCounter from \"../components/MileCounter\";\nimport { useState, useEffect, Dispatch, SetStateAction } from 'react';\n\n\n\n\nconst getCoordinates: (arr: Coordinates[], callback: any) => void = (arr, callback) => {\n    \n    let response = null;\n    var options = {\n        enableHighAccuracy: true,\n        timeout: 1000,\n        maximumAge: 0\n    };\n\n    function success(pos: any) {\n        let crd = pos.coords;\n        response = {\n            lat: crd.latitude,\n            lng: crd.longitude,\n            // utc: Date.now()\n        } as Coordinates\n        callback([...arr, response]);\n        return;\n    }\n      \n    function error(err: any) {\n        console.warn(`ERROR(${err.code}): ${err.message}`);\n    }\n\n    navigator.geolocation.getCurrentPosition(success, error, options);\n}\n\ninterface Coordinates {\n    lat: number;\n    lng: number;\n    utc?: number;\n}\n\ninterface StartStopProps {\n    isRunning: boolean,\n    toggle: Dispatch<SetStateAction<boolean>>\n}\n\nconst StartStop = (props: StartStopProps) => {\n    const { isRunning, toggle } = props;\n    return (\n        isRunning \n            ? <a onClick={() => toggle(false)}>Pause</a>\n            : <a onClick={() => toggle(true)}>Start</a>\n    )\n}\nconst Running = () => {\n    const [coordinates, setCoordinates] = useState([] as Coordinates[]);\n    const [isRunning, setIsRunning] = useState(true);\n\n    useEffect(() => {\n        if(isRunning) {\n            setInterval(() => {\n                const currentPosition = getCoordinates(coordinates, setCoordinates);\n                console.log(coordinates)\n               \n                //console.log(coordinates);\n\n            }, 5000)\n        } \n    })\n\n    \n\n    return (\n        <Page>\n            <h1>Run!</h1>\n            <MileCounter />\n            <Timer/>\n            <StartStop isRunning={isRunning} toggle={setIsRunning}/>\n            <Link href=\"/finished\"><a>Stop</a></Link>\n        </Page>\n    )\n}\n    \nexport default Running"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nvar _jsxFileName = \"/Users/nicbovee/Projects/PrismaDemo/frontend/pages/running.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Page from \"../templates/Page\";\nimport Link from \"next/link\";\nimport Timer from \"../components/Timer\";\nimport MileCounter from \"../components/MileCounter\";\nimport { useState, useEffect } from 'react';\n\nfunction success(pos) {\n  var crd = pos.coords;\n  console.log('Your current position is:');\n  console.log(`Latitude : ${crd.latitude}`);\n  console.log(`Longitude: ${crd.longitude}`);\n  console.log(`More or less ${crd.accuracy} meters.`);\n}\n\nfunction error(err) {\n  console.warn(`ERROR(${err.code}): ${err.message}`);\n}\n\nconst getCurrentPosition = options => {\n  return new _Promise((resolve, reject) => {\n    navigator.geolocation.getCurrentPosition(resolve, reject, options);\n  });\n};\n\nconst getCoordinates = async () => {\n  let coordinates = null;\n  var options = {\n    enableHighAccuracy: true,\n    timeout: 1000,\n    maximumAge: 0\n  };\n\n  try {\n    const crd = await getCurrentPosition(options);\n    coordinates = {\n      lat: crd.latitude,\n      lng: crd.longitude // utc: Date.now()\n\n    };\n  } catch (err) {\n    console.warn(`ERROR(${err.code}): ${err.message}`);\n  }\n\n  return coordinates;\n};\n\nconst StartStop = props => {\n  const {\n    isRunning,\n    toggle\n  } = props;\n  return isRunning ? __jsx(\"a\", {\n    onClick: () => toggle(false),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, \"Pause\") : __jsx(\"a\", {\n    onClick: () => toggle(true),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, \"Start\");\n};\n\nconst Running = () => {\n  const {\n    0: coordinates,\n    1: setCoordinates\n  } = useState([]);\n  const {\n    0: isRunning,\n    1: setIsRunning\n  } = useState(true);\n\n  async function updateCoordinates() {\n    const currentPosition = await getCoordinates();\n    console.log({\n      currentPosition\n    });\n\n    if (isRunning) {\n      setInterval(() => {\n        if (currentPosition !== null) {\n          setCoordinates([...coordinates, currentPosition]);\n        } //console.log(coordinates);\n\n      }, 1000);\n    }\n  }\n\n  useEffect(() => {\n    updateCoordinates();\n  }, []);\n  return __jsx(Page, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, \"Run!\"), __jsx(MileCounter, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }), __jsx(Timer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }), __jsx(StartStop, {\n    isRunning: isRunning,\n    toggle: setIsRunning,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }), __jsx(Link, {\n    href: \"/finished\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, __jsx(\"a\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, \"Stop\")));\n};\n\nexport default Running;","map":{"version":3,"sources":["/Users/nicbovee/Projects/PrismaDemo/frontend/pages/running.tsx"],"names":["Page","Link","Timer","MileCounter","useState","useEffect","success","pos","crd","coords","console","log","latitude","longitude","accuracy","error","err","warn","code","message","getCurrentPosition","options","resolve","reject","navigator","geolocation","getCoordinates","coordinates","enableHighAccuracy","timeout","maximumAge","lat","lng","StartStop","props","isRunning","toggle","Running","setCoordinates","setIsRunning","updateCoordinates","currentPosition","setInterval"],"mappings":"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","sourcesContent":["import Page from \"../templates/Page\";\nimport Link from \"next/link\";\nimport Timer from \"../components/Timer\";\nimport MileCounter from \"../components/MileCounter\";\nimport { useState, useEffect, Dispatch, SetStateAction } from 'react';\n\n\n  \n  function success(pos: any) {\n    var crd = pos.coords;\n  \n    console.log('Your current position is:');\n    console.log(`Latitude : ${crd.latitude}`);\n    console.log(`Longitude: ${crd.longitude}`);\n    console.log(`More or less ${crd.accuracy} meters.`);\n  }\n  \n  function error(err: any) {\n    console.warn(`ERROR(${err.code}): ${err.message}`);\n  }\n  \n\nconst getCurrentPosition = (options: any) => {\n    return new Promise((resolve, reject) => {\n        navigator.geolocation.getCurrentPosition(resolve, reject, options);\n    })\n}\n\nconst getCoordinates: () => Promise<Coordinates | null> = async () => {\n    \n    let coordinates = null;\n    var options = {\n        enableHighAccuracy: true,\n        timeout: 1000,\n        maximumAge: 0\n    };\n\n    try { \n        const crd:any = await getCurrentPosition(options);\n        coordinates = {\n            lat: crd.latitude,\n            lng: crd.longitude,\n            // utc: Date.now()\n        } as Coordinates\n    } catch (err) {\n        console.warn(`ERROR(${err.code}): ${err.message}`);\n    }\n\n\n    return coordinates\n}\n\ninterface Coordinates {\n    lat: number;\n    lng: number;\n    utc?: number;\n}\n\ninterface StartStopProps {\n    isRunning: boolean,\n    toggle: Dispatch<SetStateAction<boolean>>\n}\n\nconst StartStop = (props: StartStopProps) => {\n    const { isRunning, toggle } = props;\n    return (\n        isRunning \n            ? <a onClick={() => toggle(false)}>Pause</a>\n            : <a onClick={() => toggle(true)}>Start</a>\n    )\n}\nconst Running = () => {\n    const [coordinates, setCoordinates] = useState([] as Coordinates[]);\n    const [isRunning, setIsRunning] = useState(true);\n\n    async function updateCoordinates() {\n        const currentPosition = await getCoordinates();\n        console.log({currentPosition})\n        if(isRunning) {\n            setInterval(() => {\n                if(currentPosition !== null) {\n                    setCoordinates([...coordinates, currentPosition])\n                }\n                //console.log(coordinates);\n            }, 1000)\n        } \n        \n    }\n    useEffect(() => {\n        updateCoordinates();\n    }, [])\n\n    \n\n    return (\n        <Page>\n            <h1>Run!</h1>\n            <MileCounter />\n            <Timer/>\n            <StartStop isRunning={isRunning} toggle={setIsRunning}/>\n            <Link href=\"/finished\"><a>Stop</a></Link>\n        </Page>\n    )\n}\n    \nexport default Running"]},"metadata":{},"sourceType":"module"}
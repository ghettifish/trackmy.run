{"ast":null,"code":"import _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nvar _jsxFileName = \"/Users/nicbovee/Projects/PrismaDemo/frontend/pages/running.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Page from \"../templates/Page\";\nimport Link from \"next/link\";\nimport Timer from \"../components/Timer\";\nimport MileCounter from \"../components/MileCounter\";\nimport { useState, useEffect, useRef } from 'react';\nimport styled from \"styled-components\";\n\nconst getCoordinates = (arr, callback) => {\n  let response = null;\n  var options = {\n    enableHighAccuracy: true,\n    timeout: 1000,\n    maximumAge: 0\n  };\n\n  function success(pos) {\n    let crd = pos.coords;\n    response = {\n      lat: crd.latitude,\n      lng: crd.longitude,\n      utc: _Date$now()\n    };\n    callback([...arr, response]);\n    return;\n  }\n\n  function error(err) {\n    console.warn(`ERROR(${err.code}): ${err.message}`);\n  }\n\n  navigator.geolocation.getCurrentPosition(success, error, options);\n};\n\nconst StartStop = props => {\n  const {\n    isRunning,\n    toggle\n  } = props;\n  return isRunning ? __jsx(Button, {\n    onClick: () => toggle(false),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, \"Pause\") : __jsx(Button, {\n    onClick: () => toggle(true),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, \"Start\");\n};\n\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef(); // Remember the latest callback.\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]); // Set up the interval.\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nconst startTime = _Date$now();\n\nconst Running = () => {\n  const {\n    0: coordinates,\n    1: setCoordinates\n  } = useState([]);\n  const {\n    0: isRunning,\n    1: setIsRunning\n  } = useState(true);\n  const {\n    0: duration,\n    1: setDuration\n  } = useState(0);\n  useInterval(() => {\n    if (isRunning) {\n      getCoordinates(coordinates, setCoordinates);\n      const currentTime = coordinates[coordinates.length - 1] && coordinates[coordinates.length - 1].utc;\n\n      if (currentTime) {\n        setDuration((currentTime - startTime) / 1000);\n      }\n\n      console.log(coordinates); //console.log(coordinates);\n    }\n  }, 1000);\n  return __jsx(Page, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, \"Run!\"), __jsx(MileCounter, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }), __jsx(Timer, {\n    time: duration,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }), __jsx(StartStop, {\n    isRunning: isRunning,\n    toggle: setIsRunning,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }), __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }), __jsx(Link, {\n    href: \"/finished\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, __jsx(ButtonLink, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, \"Stop\")), __jsx(Console, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, coordinates.map(x => __jsx(LineItem, {\n    key: x.utc,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, \"Lat: \", x.lat, \" | Lng: \", x.lng, \" | UTC: \", x.utc))));\n};\n\nconst Button = styled.button`\n    padding: 10px 30px ;\n    border: none;\n    background: orange;\n    margin-bottom: 15px;\n`;\nconst ButtonLink = styled.a`\n    padding: 10px 30px ;\n    border: none;\n    background: orange;\n    margin-bottom: 15px;\n`;\nconst Console = styled.ul`\n    background: #16103a;\n    min-height: 500px;\n    max-height: 1024px;\n    overflow: scroll;\n    margin-block-start: 0;\n    padding-inline-start: 0;\n`;\nconst LineItem = styled.li`\n    font-size: 10px;\n    color: #fff;\n    list-style-type: none;\n    font-family: monospace;\n    padding: 0;\n`;\nexport default Running;","map":{"version":3,"sources":["/Users/nicbovee/Projects/PrismaDemo/frontend/pages/running.tsx"],"names":["Page","Link","Timer","MileCounter","useState","useEffect","useRef","styled","getCoordinates","arr","callback","response","options","enableHighAccuracy","timeout","maximumAge","success","pos","crd","coords","lat","latitude","lng","longitude","utc","error","err","console","warn","code","message","navigator","geolocation","getCurrentPosition","StartStop","props","isRunning","toggle","useInterval","delay","savedCallback","current","tick","id","setInterval","clearInterval","startTime","Running","coordinates","setCoordinates","setIsRunning","duration","setDuration","currentTime","length","log","map","x","Button","button","ButtonLink","a","Console","ul","LineItem","li"],"mappings":"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","sourcesContent":["import Page from \"../templates/Page\";\nimport Link from \"next/link\";\nimport Timer from \"../components/Timer\";\nimport MileCounter from \"../components/MileCounter\";\nimport { useState, useEffect, Dispatch, SetStateAction, useRef } from 'react';\nimport styled from \"styled-components\";\n\n\n\nconst getCoordinates: (arr: Coordinates[], callback: any) => void = (arr, callback) => {\n    \n    let response = null;\n    var options = {\n        enableHighAccuracy: true,\n        timeout: 1000,\n        maximumAge: 0\n    };\n\n    function success(pos: any) {\n        let crd = pos.coords;\n        response = {\n            lat: crd.latitude,\n            lng: crd.longitude,\n            utc: Date.now()\n        } as Coordinates\n        callback([...arr, response]);\n        return;\n    }\n      \n    function error(err: any) {\n        console.warn(`ERROR(${err.code}): ${err.message}`);\n    }\n\n    navigator.geolocation.getCurrentPosition(success, error, options);\n}\n\ninterface Coordinates {\n    lat: number;\n    lng: number;\n    utc: number;\n}\n\ninterface StartStopProps {\n    isRunning: boolean,\n    toggle: Dispatch<SetStateAction<boolean>>\n}\n\nconst StartStop = (props: StartStopProps) => {\n    const { isRunning, toggle } = props;\n    return (\n        isRunning \n            ? <Button onClick={() => toggle(false)}>Pause</Button>\n            : <Button onClick={() => toggle(true)}>Start</Button>\n    )\n}\nfunction useInterval(callback: any, delay: any) {\n    const savedCallback = useRef() as any;\n  \n    // Remember the latest callback.\n    useEffect(() => {\n      savedCallback.current = callback;\n    }, [callback]);\n  \n    // Set up the interval.\n    useEffect(() => {\n      function tick() {\n        savedCallback.current();\n      }\n      if (delay !== null) {\n        let id = setInterval(tick, delay);\n        return () => clearInterval(id);\n      }\n    }, [delay]);\n  }\n  const startTime = Date.now();\n\nconst Running = () => {\n    const [coordinates, setCoordinates] = useState([] as Coordinates[]);\n    const [isRunning, setIsRunning] = useState(true);\n    const [duration, setDuration]  = useState(0);\n\n    useInterval(() => {\n        if(isRunning) {\n            getCoordinates(coordinates, setCoordinates);\n            const currentTime = coordinates[coordinates.length-1] && coordinates[coordinates.length-1].utc;\n            if(currentTime) {\n                setDuration((currentTime - startTime) / 1000);\n            }\n            console.log(coordinates)\n           \n            //console.log(coordinates);\n\n        } \n    }, 1000)\n\n    \n\n    return (\n        <Page>\n            <h1>Run!</h1>\n            <MileCounter />\n            <Timer time={duration}/>\n            <StartStop isRunning={isRunning} toggle={setIsRunning}/>\n            <br />\n            <Link href=\"/finished\"><ButtonLink>Stop</ButtonLink></Link>\n            <Console>\n            {\n                coordinates.map(x => <LineItem key={x.utc}>Lat: {x.lat} | Lng: {x.lng} | UTC: {x.utc}</LineItem>)\n            }\n            </Console>\n        </Page>\n    )\n}\n\nconst Button = styled.button`\n    padding: 10px 30px ;\n    border: none;\n    background: orange;\n    margin-bottom: 15px;\n`;\n\nconst ButtonLink = styled.a`\n    padding: 10px 30px ;\n    border: none;\n    background: orange;\n    margin-bottom: 15px;\n`;\nconst Console = styled.ul`\n    background: #16103a;\n    min-height: 500px;\n    max-height: 1024px;\n    overflow: scroll;\n    margin-block-start: 0;\n    padding-inline-start: 0;\n`;\nconst LineItem = styled.li`\n    font-size: 10px;\n    color: #fff;\n    list-style-type: none;\n    font-family: monospace;\n    padding: 0;\n`\n\nexport default Running"]},"metadata":{},"sourceType":"module"}
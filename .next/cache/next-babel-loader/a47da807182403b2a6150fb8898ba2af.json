{"ast":null,"code":"var _jsxFileName = \"/Users/nicbovee/Projects/PrismaDemo/frontend/pages/running.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Page from \"../templates/Page\";\nimport Link from \"next/link\";\nimport Timer from \"../components/Timer\";\nimport MileCounter from \"../components/MileCounter\";\nimport { useState, useEffect } from 'react';\n\nfunction success(pos) {\n  var crd = pos.coords;\n  console.log('Your current position is:');\n  console.log(`Latitude : ${crd.latitude}`);\n  console.log(`Longitude: ${crd.longitude}`);\n  console.log(`More or less ${crd.accuracy} meters.`);\n}\n\nfunction error(err) {\n  console.warn(`ERROR(${err.code}): ${err.message}`);\n}\n\nconst getCoordinates = () => {\n  var options = {\n    enableHighAccuracy: true,\n    timeout: 5000,\n    maximumAge: 0\n  };\n\n  function success(pos) {\n    let crd = pos.coords;\n    console.log('Your current position is:');\n    console.log(`Latitude : ${crd.latitude}`);\n    console.log(`Longitude: ${crd.longitude}`);\n    console.log(`More or less ${crd.accuracy} meters.`);\n    return {\n      lat: crd.latitude,\n      lng: crd.longitude\n    };\n  }\n\n  function error(err) {\n    console.warn(`ERROR(${err.code}): ${err.message}`);\n  }\n\n  navigator.geolocation.getCurrentPosition(success, error, options);\n  return null;\n};\n\nconst Running = () => {\n  const {\n    0: coordinates,\n    1: setCoordinates\n  } = useState([]);\n  const {\n    0: isRunning,\n    1: setIsRunning\n  } = useState([]);\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      const currentPosition = getCoordinates();\n\n      if (currentPosition !== null) {\n        setCoordinates([...coordinates, currentPosition]);\n      }\n    }, 1000);\n  });\n  return __jsx(Page, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, \"Run!\"), __jsx(MileCounter, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }), __jsx(Timer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }), __jsx(Link, {\n    href: \"/finished\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, \"Stop\"));\n};\n\nexport default Running;","map":{"version":3,"sources":["/Users/nicbovee/Projects/PrismaDemo/frontend/pages/running.tsx"],"names":["Page","Link","Timer","MileCounter","useState","useEffect","success","pos","crd","coords","console","log","latitude","longitude","accuracy","error","err","warn","code","message","getCoordinates","options","enableHighAccuracy","timeout","maximumAge","lat","lng","navigator","geolocation","getCurrentPosition","Running","coordinates","setCoordinates","isRunning","setIsRunning","timer","setTimeout","currentPosition"],"mappings":"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","sourcesContent":["import Page from \"../templates/Page\";\nimport Link from \"next/link\";\nimport Timer from \"../components/Timer\";\nimport MileCounter from \"../components/MileCounter\";\nimport { useState, useEffect } from 'react';\n\n\n  \n  function success(pos: any) {\n    var crd = pos.coords;\n  \n    console.log('Your current position is:');\n    console.log(`Latitude : ${crd.latitude}`);\n    console.log(`Longitude: ${crd.longitude}`);\n    console.log(`More or less ${crd.accuracy} meters.`);\n  }\n  \n  function error(err: any) {\n    console.warn(`ERROR(${err.code}): ${err.message}`);\n  }\n  \n\n\nconst getCoordinates: () => Coordinates | null = () => {\n    var options = {\n        enableHighAccuracy: true,\n        timeout: 5000,\n        maximumAge: 0\n    };\n    function success(pos: any) {\n        let crd = pos.coords;\n      \n        console.log('Your current position is:');\n        console.log(`Latitude : ${crd.latitude}`);\n        console.log(`Longitude: ${crd.longitude}`);\n        console.log(`More or less ${crd.accuracy} meters.`);\n        return {\n            lat: crd.latitude,\n            lng: crd.longitude\n        } as Coordinates\n    }\n      \n    function error(err: any) {\n        console.warn(`ERROR(${err.code}): ${err.message}`);\n    }\n\n    navigator.geolocation.getCurrentPosition(success, error, options);\n    return null;\n\n}\n\ninterface Coordinates {\n    lat: number;\n    lng: number;\n    utc?: number;\n}\n\nconst Running = () => {\n    const [coordinates, setCoordinates] = useState([] as Coordinates[]);\n    const [isRunning, setIsRunning] = useState([]);\n\n\n    useEffect(() => {\n        const timer = setTimeout(() => {\n            const currentPosition = getCoordinates();\n            if(currentPosition !== null) {\n                setCoordinates([...coordinates, currentPosition])\n            }\n        }, 1000)\n    })\n    return (\n        <Page>\n            <h1>Run!</h1>\n            <MileCounter />\n            <Timer/>\n            <Link href=\"/finished\">Stop</Link>\n        </Page>\n    )\n}\n    \nexport default Running"]},"metadata":{},"sourceType":"module"}
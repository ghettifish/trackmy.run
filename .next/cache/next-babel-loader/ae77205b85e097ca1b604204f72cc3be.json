{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nvar _jsxFileName = \"/Users/nicbovee/Projects/PrismaDemo/frontend/pages/running.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Page from \"../templates/Page\";\nimport Link from \"next/link\";\nimport Timer from \"../components/Timer\";\nimport MileCounter from \"../components/MileCounter\";\nimport { useState, useEffect } from 'react';\n\nfunction success(pos) {\n  var crd = pos.coords;\n  console.log('Your current position is:');\n  console.log(\"Latitude : \".concat(crd.latitude));\n  console.log(\"Longitude: \".concat(crd.longitude));\n  console.log(\"More or less \".concat(crd.accuracy, \" meters.\"));\n}\n\nfunction error(err) {\n  console.warn(\"ERROR(\".concat(err.code, \"): \").concat(err.message));\n}\n\nvar getCurrentPosition = function getCurrentPosition(options) {\n  return new _Promise(function (resolve, reject) {\n    navigator.geolocation.getCurrentPosition(resolve, reject, options);\n  });\n};\n\nvar getCoordinates =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    var coordinates, options, crd;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            coordinates = null;\n            options = {\n              enableHighAccuracy: true,\n              timeout: 1000,\n              maximumAge: 0\n            };\n            _context.prev = 2;\n            _context.next = 5;\n            return getCurrentPosition(options);\n\n          case 5:\n            crd = _context.sent;\n            coordinates = {\n              lat: crd.latitude,\n              lng: crd.longitude // utc: Date.now()\n\n            };\n            _context.next = 12;\n            break;\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](2);\n            console.warn(\"ERROR(\".concat(_context.t0.code, \"): \").concat(_context.t0.message));\n\n          case 12:\n            return _context.abrupt(\"return\", coordinates);\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[2, 9]]);\n  }));\n\n  return function getCoordinates() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar StartStop = function StartStop(props) {\n  var isRunning = props.isRunning,\n      toggle = props.toggle;\n  return isRunning ? __jsx(\"a\", {\n    onClick: function onClick() {\n      return toggle(false);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, \"Pause\") : __jsx(\"a\", {\n    onClick: function onClick() {\n      return toggle(true);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, \"Start\");\n};\n\nvar Running = function Running() {\n  var _useState = useState([]),\n      coordinates = _useState[0],\n      setCoordinates = _useState[1];\n\n  var _useState2 = useState(true),\n      isRunning = _useState2[0],\n      setIsRunning = _useState2[1];\n\n  function updateCoordinates() {\n    return _updateCoordinates.apply(this, arguments);\n  }\n\n  function _updateCoordinates() {\n    _updateCoordinates = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var currentPosition;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return getCoordinates();\n\n            case 2:\n              currentPosition = _context2.sent;\n              console.log({\n                currentPosition: currentPosition\n              });\n\n              if (isRunning) {\n                setInterval(function () {\n                  if (currentPosition !== null) {\n                    setCoordinates([].concat(_toConsumableArray(coordinates), [currentPosition]));\n                  } //console.log(coordinates);\n\n                }, 1000);\n              }\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    return _updateCoordinates.apply(this, arguments);\n  }\n\n  useEffect(function () {\n    updateCoordinates();\n  }, []);\n  return __jsx(Page, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, \"Run!\"), __jsx(MileCounter, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }), __jsx(Timer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }), __jsx(StartStop, {\n    isRunning: isRunning,\n    toggle: setIsRunning,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }), __jsx(Link, {\n    href: \"/finished\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, __jsx(\"a\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, \"Stop\")));\n};\n\nexport default Running;","map":{"version":3,"sources":["/Users/nicbovee/Projects/PrismaDemo/frontend/pages/running.tsx"],"names":["Page","Link","Timer","MileCounter","useState","useEffect","success","pos","crd","coords","console","log","latitude","longitude","accuracy","error","err","warn","code","message","getCurrentPosition","options","resolve","reject","navigator","geolocation","getCoordinates","coordinates","enableHighAccuracy","timeout","maximumAge","lat","lng","StartStop","props","isRunning","toggle","Running","setCoordinates","setIsRunning","updateCoordinates","currentPosition","setInterval"],"mappings":"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","sourcesContent":["import Page from \"../templates/Page\";\nimport Link from \"next/link\";\nimport Timer from \"../components/Timer\";\nimport MileCounter from \"../components/MileCounter\";\nimport { useState, useEffect, Dispatch, SetStateAction } from 'react';\n\n\n  \n  function success(pos: any) {\n    var crd = pos.coords;\n  \n    console.log('Your current position is:');\n    console.log(`Latitude : ${crd.latitude}`);\n    console.log(`Longitude: ${crd.longitude}`);\n    console.log(`More or less ${crd.accuracy} meters.`);\n  }\n  \n  function error(err: any) {\n    console.warn(`ERROR(${err.code}): ${err.message}`);\n  }\n  \n\nconst getCurrentPosition = (options: any) => {\n    return new Promise((resolve, reject) => {\n        navigator.geolocation.getCurrentPosition(resolve, reject, options);\n    })\n}\n\nconst getCoordinates: () => Promise<Coordinates | null> = async () => {\n    \n    let coordinates = null;\n    var options = {\n        enableHighAccuracy: true,\n        timeout: 1000,\n        maximumAge: 0\n    };\n\n    try { \n        const crd:any = await getCurrentPosition(options);\n        coordinates = {\n            lat: crd.latitude,\n            lng: crd.longitude,\n            // utc: Date.now()\n        } as Coordinates\n    } catch (err) {\n        console.warn(`ERROR(${err.code}): ${err.message}`);\n    }\n\n\n    return coordinates\n}\n\ninterface Coordinates {\n    lat: number;\n    lng: number;\n    utc?: number;\n}\n\ninterface StartStopProps {\n    isRunning: boolean,\n    toggle: Dispatch<SetStateAction<boolean>>\n}\n\nconst StartStop = (props: StartStopProps) => {\n    const { isRunning, toggle } = props;\n    return (\n        isRunning \n            ? <a onClick={() => toggle(false)}>Pause</a>\n            : <a onClick={() => toggle(true)}>Start</a>\n    )\n}\nconst Running = () => {\n    const [coordinates, setCoordinates] = useState([] as Coordinates[]);\n    const [isRunning, setIsRunning] = useState(true);\n\n    async function updateCoordinates() {\n        const currentPosition = await getCoordinates();\n        console.log({currentPosition})\n        if(isRunning) {\n            setInterval(() => {\n                if(currentPosition !== null) {\n                    setCoordinates([...coordinates, currentPosition])\n                }\n                //console.log(coordinates);\n            }, 1000)\n        } \n        \n    }\n    useEffect(() => {\n        updateCoordinates();\n    }, [])\n\n    \n\n    return (\n        <Page>\n            <h1>Run!</h1>\n            <MileCounter />\n            <Timer/>\n            <StartStop isRunning={isRunning} toggle={setIsRunning}/>\n            <Link href=\"/finished\"><a>Stop</a></Link>\n        </Page>\n    )\n}\n    \nexport default Running"]},"metadata":{},"sourceType":"module"}
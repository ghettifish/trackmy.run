{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nvar _jsxFileName = \"/Users/nicbovee/Projects/PrismaDemo/frontend/pages/running.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Page from \"../templates/Page\";\nimport Link from \"next/link\";\nimport Timer from \"../components/Timer\";\nimport MileCounter from \"../components/MileCounter\";\nimport { useState, useEffect } from 'react';\n\nfunction success(pos) {\n  var crd = pos.coords;\n  console.log('Your current position is:');\n  console.log(\"Latitude : \".concat(crd.latitude));\n  console.log(\"Longitude: \".concat(crd.longitude));\n  console.log(\"More or less \".concat(crd.accuracy, \" meters.\"));\n}\n\nfunction error(err) {\n  console.warn(\"ERROR(\".concat(err.code, \"): \").concat(err.message));\n}\n\nvar getCoordinates = function getCoordinates() {\n  var crd;\n  var coordinates = null;\n  var options = {\n    enableHighAccuracy: true,\n    timeout: 1000,\n    maximumAge: 0\n  };\n\n  function success(pos) {\n    crd = pos.coords;\n    console.log(crd.latitude);\n    coordinates = {\n      lat: crd.latitude,\n      lng: crd.longitude // utc: Date.now()\n\n    };\n  }\n\n  function error(err) {\n    console.warn(\"ERROR(\".concat(err.code, \"): \").concat(err.message));\n  }\n\n  navigator.geolocation.getCurrentPosition(success, error, options);\n  return crd;\n};\n\nvar StartStop = function StartStop(props) {\n  var isRunning = props.isRunning,\n      toggle = props.toggle;\n  return isRunning ? __jsx(\"a\", {\n    onClick: function onClick() {\n      return toggle(false);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, \"Pause\") : __jsx(\"a\", {\n    onClick: function onClick() {\n      return toggle(true);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, \"Start\");\n};\n\nvar Running = function Running() {\n  var _useState = useState([]),\n      coordinates = _useState[0],\n      setCoordinates = _useState[1];\n\n  var _useState2 = useState(true),\n      isRunning = _useState2[0],\n      setIsRunning = _useState2[1];\n\n  useEffect(function () {\n    if (isRunning) {\n      setInterval(function () {\n        var currentPosition = null;\n        var options = {\n          enableHighAccuracy: true,\n          timeout: 1000,\n          maximumAge: 0\n        };\n\n        function success(pos) {\n          var crd = pos.coords;\n          console.log(crd.latitude);\n          currentPosition = {\n            lat: crd.latitude,\n            lng: crd.longitude // utc: Date.now()\n\n          };\n        }\n\n        function error(err) {\n          console.warn(\"ERROR(\".concat(err.code, \"): \").concat(err.message));\n        }\n\n        navigator.geolocation.getCurrentPosition(success, error, options);\n\n        if (currentPosition !== null) {\n          setCoordinates([].concat(_toConsumableArray(coordinates), [currentPosition]));\n        } //console.log(coordinates);\n\n      }, 1000);\n    }\n  });\n  return __jsx(Page, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, \"Run!\"), __jsx(MileCounter, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }), __jsx(Timer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }), __jsx(StartStop, {\n    isRunning: isRunning,\n    toggle: setIsRunning,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }), __jsx(Link, {\n    href: \"/finished\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, __jsx(\"a\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, \"Stop\")));\n};\n\nexport default Running;","map":{"version":3,"sources":["/Users/nicbovee/Projects/PrismaDemo/frontend/pages/running.tsx"],"names":["Page","Link","Timer","MileCounter","useState","useEffect","success","pos","crd","coords","console","log","latitude","longitude","accuracy","error","err","warn","code","message","getCoordinates","coordinates","options","enableHighAccuracy","timeout","maximumAge","lat","lng","navigator","geolocation","getCurrentPosition","StartStop","props","isRunning","toggle","Running","setCoordinates","setIsRunning","setInterval","currentPosition"],"mappings":"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","sourcesContent":["import Page from \"../templates/Page\";\nimport Link from \"next/link\";\nimport Timer from \"../components/Timer\";\nimport MileCounter from \"../components/MileCounter\";\nimport { useState, useEffect, Dispatch, SetStateAction } from 'react';\n\n\n  \n  function success(pos: any) {\n    var crd = pos.coords;\n  \n    console.log('Your current position is:');\n    console.log(`Latitude : ${crd.latitude}`);\n    console.log(`Longitude: ${crd.longitude}`);\n    console.log(`More or less ${crd.accuracy} meters.`);\n  }\n  \n  function error(err: any) {\n    console.warn(`ERROR(${err.code}): ${err.message}`);\n  }\n  \n\n\nconst getCoordinates: () => Coordinates | null | undefined = () => {\n    \n    let crd;\n    let coordinates = null;\n    var options = {\n        enableHighAccuracy: true,\n        timeout: 1000,\n        maximumAge: 0\n    };\n\n    function success(pos: any) {\n        crd = pos.coords;\n        console.log(crd.latitude)\n        coordinates = {\n            lat: crd.latitude,\n            lng: crd.longitude,\n            // utc: Date.now()\n        } as Coordinates\n    }\n      \n    function error(err: any) {\n        console.warn(`ERROR(${err.code}): ${err.message}`);\n    }\n\n    navigator.geolocation.getCurrentPosition(success, error, options);\n\n    return crd\n}\n\ninterface Coordinates {\n    lat: number;\n    lng: number;\n    utc?: number;\n}\n\ninterface StartStopProps {\n    isRunning: boolean,\n    toggle: Dispatch<SetStateAction<boolean>>\n}\n\nconst StartStop = (props: StartStopProps) => {\n    const { isRunning, toggle } = props;\n    return (\n        isRunning \n            ? <a onClick={() => toggle(false)}>Pause</a>\n            : <a onClick={() => toggle(true)}>Start</a>\n    )\n}\nconst Running = () => {\n    const [coordinates, setCoordinates] = useState([] as Coordinates[]);\n    const [isRunning, setIsRunning] = useState(true);\n\n    useEffect(() => {\n        if(isRunning) {\n            setInterval(() => {\n     \n        let currentPosition = null;\n        var options = {\n            enableHighAccuracy: true,\n            timeout: 1000,\n            maximumAge: 0\n        };\n\n        function success(pos: any) {\n            let crd = pos.coords;\n            console.log(crd.latitude)\n            currentPosition = {\n                lat: crd.latitude,\n                lng: crd.longitude,\n                // utc: Date.now()\n            } as Coordinates\n        }\n        \n        function error(err: any) {\n            console.warn(`ERROR(${err.code}): ${err.message}`);\n        }\n\n        navigator.geolocation.getCurrentPosition(success, error, options);\n            if(currentPosition !== null) {\n                setCoordinates([...coordinates, currentPosition])\n            }\n            //console.log(coordinates);\n\n            }, 1000)\n        } \n    })\n\n    \n\n    return (\n        <Page>\n            <h1>Run!</h1>\n            <MileCounter />\n            <Timer/>\n            <StartStop isRunning={isRunning} toggle={setIsRunning}/>\n            <Link href=\"/finished\"><a>Stop</a></Link>\n        </Page>\n    )\n}\n    \nexport default Running"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nvar _jsxFileName = \"/Users/nicbovee/Projects/PrismaDemo/frontend/pages/running.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Page from \"../templates/Page\";\nimport Link from \"next/link\";\nimport Timer from \"../components/Timer\";\nimport MileCounter from \"../components/MileCounter\";\nimport { useState, useEffect, useRef } from 'react';\nimport styled from \"styled-components\";\n\nconst getCoordinates = (arr, callback) => {\n  let response = null;\n  var options = {\n    enableHighAccuracy: true,\n    timeout: 1000,\n    maximumAge: 0\n  };\n\n  function success(pos) {\n    let crd = pos.coords;\n    response = {\n      latitude: crd.latitude,\n      longitude: crd.longitude,\n      accuracy: crd.accuracy,\n      altitude: crd.altitude,\n      altitudeAccuracy: crd.altitudeAccuracy,\n      heading: crd.heading,\n      speed: crd.speed,\n      utc: _Date$now()\n    };\n    callback([...arr, response]);\n    return;\n  }\n\n  function error(err) {\n    console.warn(`ERROR(${err.code}): ${err.message}`);\n  }\n\n  navigator.geolocation.getCurrentPosition(success, error, options);\n};\n\nconst sampleData = [{\n  latitude: 39.0067718,\n  longitude: -105.06114945,\n  utc: 1567956461422\n}, {\n  latitude: 39.0069154,\n  longitude: -105.0603721,\n  utc: 1567956490407\n}, {\n  latitude: 38.9993031,\n  longitude: -105.0402898,\n  utc: 1567958139410\n}];\n\nconst StartStop = props => {\n  const {\n    isRunning,\n    toggle\n  } = props;\n  return isRunning ? __jsx(Button, {\n    onClick: () => toggle(false),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, \"Pause\") : __jsx(Button, {\n    onClick: () => toggle(true),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, \"Start\");\n};\n\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef(); // Remember the latest callback.\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]); // Set up the interval.\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nconst startTime = _Date$now();\n\nconst Running = () => {\n  const {\n    0: coordinates,\n    1: setCoordinates\n  } = useState([]);\n  const {\n    0: isRunning,\n    1: setIsRunning\n  } = useState(true);\n  const {\n    0: duration,\n    1: setDuration\n  } = useState(0);\n  const {\n    0: speed,\n    1: setSpeed\n  } = useState(0);\n  useInterval(() => {\n    if (isRunning) {\n      getCoordinates(coordinates, setCoordinates);\n      const currentTime = coordinates[coordinates.length - 1] && coordinates[coordinates.length - 1].utc;\n\n      if (currentTime) {\n        setDuration((currentTime - startTime) / 1000);\n      }\n\n      const currentSpeed = coordinates[coordinates.length - 1] && coordinates[coordinates.length - 1].speed;\n\n      if (currentSpeed) {\n        setSpeed(currentSpeed);\n      }\n\n      console.log(coordinates); //console.log(coordinates);\n    }\n  }, 1000);\n  return __jsx(Page, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    style: {\n      fontFamily: \"sans-serif\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, \"Run!\"), __jsx(MileCounter, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }), __jsx(Timer, {\n    time: duration,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }), __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, __jsx(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, \"Speed: \"), speed), __jsx(StartStop, {\n    isRunning: isRunning,\n    toggle: setIsRunning,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }), __jsx(Link, {\n    href: \"/finished\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, __jsx(ButtonLink, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, \"Stop\")), __jsx(Console, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, coordinates.map((x, i) => {\n    const pointer = coordinates[coordinates.length - 1 - i];\n    return __jsx(LineItem, {\n      key: pointer.utc,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, \"Lat: \", pointer.latitude, \" | Lng: \", pointer.longitude, \" | UTC: \", pointer.utc, \" | Speed: \", pointer.speed || \"null\");\n  })));\n};\n\nconst Button = styled.button`\n    padding: 10px 30px ;\n    border: none;\n    background: orange;\n    margin: 15px;\n    font-family: sans-serif;\n    font-size: 14px;\n`;\nconst ButtonLink = styled.a`\n    padding: 10px 30px ;\n    border: none;\n    background: orange;\n    font-family: sans-serif;\n    font-size: 14px;\n`;\nconst Console = styled.ul`\n    background: #16103a;\n    min-height: 500px;\n    max-height: 500px;\n    overflow: scroll;\n    margin-block-start: 0;\n    padding-inline-start: 0;\n`;\nconst LineItem = styled.li`\n    font-size: 8px;\n    color: #fff;\n    list-style-type: none;\n    font-family: monospace;\n    padding: 0;\n`;\nexport default Running;","map":{"version":3,"sources":["/Users/nicbovee/Projects/PrismaDemo/frontend/pages/running.tsx"],"names":["Page","Link","Timer","MileCounter","useState","useEffect","useRef","styled","getCoordinates","arr","callback","response","options","enableHighAccuracy","timeout","maximumAge","success","pos","crd","coords","latitude","longitude","accuracy","altitude","altitudeAccuracy","heading","speed","utc","error","err","console","warn","code","message","navigator","geolocation","getCurrentPosition","sampleData","StartStop","props","isRunning","toggle","useInterval","delay","savedCallback","current","tick","id","setInterval","clearInterval","startTime","Running","coordinates","setCoordinates","setIsRunning","duration","setDuration","setSpeed","currentTime","length","currentSpeed","log","fontFamily","map","x","i","pointer","Button","button","ButtonLink","a","Console","ul","LineItem","li"],"mappings":"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","sourcesContent":["import Page from \"../templates/Page\";\nimport Link from \"next/link\";\nimport Timer from \"../components/Timer\";\nimport MileCounter from \"../components/MileCounter\";\nimport { useState, useEffect, Dispatch, SetStateAction, useRef } from 'react';\nimport styled from \"styled-components\";\n\n\n\nconst getCoordinates: (arr: Coordinates[], callback: (arr: Coordinates[]) => void) => void = (arr, callback) => {\n    \n    let response = null;\n    var options = {\n        enableHighAccuracy: true,\n        timeout: 1000,\n        maximumAge: 0\n    };\n\n    function success(pos: any) {\n        let crd: Coordinates = pos.coords;\n        response = {\n            latitude: crd.latitude,\n            longitude: crd.longitude,\n            accuracy: crd.accuracy,\n            altitude: crd.altitude,\n            altitudeAccuracy: crd.altitudeAccuracy,\n            heading: crd.heading,\n            speed: crd.speed,\n            utc: Date.now()\n        } as Coordinates\n        callback([...arr, response]);\n        return;\n    }\n      \n    function error(err: any) {\n        console.warn(`ERROR(${err.code}): ${err.message}`);\n    }\n\n    navigator.geolocation.getCurrentPosition(success, error, options);\n}\n\ninterface Coordinates {\n    latitude: number;\n    longitude: number;\n    utc: number;\n    altitude?: number | null;\n    accuracy?: number;\n    altitudeAccuracy?: number | null;\n    heading?: number | null;\n    speed?: number | null;\n}\n\nconst sampleData: Coordinates[] = [\n    {\n        latitude: 39.0067718,\n        longitude: -105.06114945,\n        utc: 1567956461422\n    },\n    {\n        latitude: 39.0069154,\n        longitude: -105.0603721,\n        utc: 1567956490407\n    },\n    {\n        latitude: 38.9993031,\n        longitude: -105.0402898,\n        utc: 1567958139410\n    }\n]\ninterface StartStopProps {\n    isRunning: boolean,\n    toggle: Dispatch<SetStateAction<boolean>>\n}\n\nconst StartStop = (props: StartStopProps) => {\n    const { isRunning, toggle } = props;\n    return (\n        isRunning \n            ? <Button onClick={() => toggle(false)}>Pause</Button>\n            : <Button onClick={() => toggle(true)}>Start</Button>\n    )\n}\nfunction useInterval(callback: any, delay: any) {\n    const savedCallback = useRef() as any;\n  \n    // Remember the latest callback.\n    useEffect(() => {\n      savedCallback.current = callback;\n    }, [callback]);\n  \n    // Set up the interval.\n    useEffect(() => {\n      function tick() {\n        savedCallback.current();\n      }\n      if (delay !== null) {\n        let id = setInterval(tick, delay);\n        return () => clearInterval(id);\n      }\n    }, [delay]);\n  }\n  const startTime = Date.now();\n\nconst Running = () => {\n    const [coordinates, setCoordinates] = useState([] as Coordinates[]);\n    const [isRunning, setIsRunning] = useState(true);\n    const [duration, setDuration]  = useState(0);\n    const [speed, setSpeed] = useState(0);\n    useInterval(() => {\n        if(isRunning) {\n            getCoordinates(coordinates, setCoordinates);\n            const currentTime = coordinates[coordinates.length-1] && coordinates[coordinates.length-1].utc;\n            if(currentTime) {\n                setDuration((currentTime - startTime) / 1000);\n            }\n\n            const currentSpeed = coordinates[coordinates.length-1] && coordinates[coordinates.length-1].speed;\n            if(currentSpeed){\n                setSpeed(currentSpeed);\n            }\n            console.log(coordinates)\n           \n            //console.log(coordinates);\n\n        } \n    }, 1000)\n\n    \n\n    return (\n        <Page>\n            <h1 style={{fontFamily: \"sans-serif\"}}>Run!</h1>\n            <MileCounter />\n            <Timer time={duration}/>\n            <p><strong>Speed: </strong>{speed}</p>\n            <StartStop isRunning={isRunning} toggle={setIsRunning}/>\n            <Link href=\"/finished\"><ButtonLink>Stop</ButtonLink></Link>\n            <Console>\n            {\n                coordinates.map((x,i) => {\n                    const pointer = coordinates[coordinates.length - 1 -i];\n                    return <LineItem key={pointer.utc}>Lat: {pointer.latitude} | Lng: {pointer.longitude} | UTC: {pointer.utc} | Speed: { pointer.speed || \"null\"}</LineItem>\n                })\n            }\n            </Console>\n        </Page>\n    )\n}\n\nconst Button = styled.button`\n    padding: 10px 30px ;\n    border: none;\n    background: orange;\n    margin: 15px;\n    font-family: sans-serif;\n    font-size: 14px;\n`;\n\nconst ButtonLink = styled.a`\n    padding: 10px 30px ;\n    border: none;\n    background: orange;\n    font-family: sans-serif;\n    font-size: 14px;\n`;\nconst Console = styled.ul`\n    background: #16103a;\n    min-height: 500px;\n    max-height: 500px;\n    overflow: scroll;\n    margin-block-start: 0;\n    padding-inline-start: 0;\n`;\nconst LineItem = styled.li`\n    font-size: 8px;\n    color: #fff;\n    list-style-type: none;\n    font-family: monospace;\n    padding: 0;\n`\n\nexport default Running"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nvar _jsxFileName = \"/Users/nicbovee/Projects/PrismaDemo/frontend/pages/running.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Page from \"../templates/Page\";\nimport Link from \"next/link\";\nimport Timer from \"../components/Timer\";\nimport { useState, useEffect, useRef } from 'react';\nimport styled from \"../components/styles/theme\";\nimport { computeDistanceBetween, LatLng } from \"spherical-geometry-js\";\nimport Distance from \"../components/Distance\";\nimport Speed from \"../components/Speed\";\nimport FullPage from \"../components/FullPage\";\n\nconst getCoordinates = (arr, callback) => {\n  let response = null;\n  var options = {\n    enableHighAccuracy: true,\n    timeout: 1000,\n    maximumAge: 0\n  };\n\n  function success(pos) {\n    let crd = pos.coords;\n    console.log(crd);\n    response = {\n      latitude: crd.latitude,\n      longitude: crd.longitude,\n      accuracy: crd.accuracy,\n      altitude: crd.altitude,\n      altitudeAccuracy: crd.altitudeAccuracy,\n      heading: crd.heading,\n      speed: crd.speed,\n      utc: _Date$now()\n    };\n    callback([...arr, response]);\n    return;\n  }\n\n  function error(err) {\n    console.warn(`ERROR(${err.code}): ${err.message}`);\n  }\n\n  navigator.geolocation.getCurrentPosition(success, error, options);\n};\n\nconst sampleData = [{\n  latitude: 39.0067718,\n  longitude: -105.06114945,\n  utc: 1567956461422\n}, {\n  latitude: 39.0069154,\n  longitude: -105.0603721,\n  utc: 1567956490407\n}, {\n  latitude: 38.9993031,\n  longitude: -105.0402898,\n  utc: 1567958139410\n}];\n\nconst StartStop = props => {\n  const {\n    isRunning,\n    toggle\n  } = props;\n  return isRunning ? __jsx(Button, {\n    onClick: () => toggle(false),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, \"Pause\") : __jsx(Button, {\n    onClick: () => toggle(true),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, \"Start\");\n};\n\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef(); // Remember the latest callback.\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]); // Set up the interval.\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nconst Running = () => {\n  const {\n    0: startTime,\n    1: setStartTime\n  } = useState(_Date$now());\n  const {\n    0: coordinates,\n    1: setCoordinates\n  } = useState([]);\n  const {\n    0: isRunning,\n    1: setIsRunning\n  } = useState(true);\n  const {\n    0: duration,\n    1: setDuration\n  } = useState(0);\n  const {\n    0: speed,\n    1: setSpeed\n  } = useState(0);\n  const {\n    0: distance,\n    1: setDistance\n  } = useState(0);\n  useInterval(() => {\n    if (isRunning) {\n      getCoordinates(coordinates, setCoordinates);\n      const current = coordinates[coordinates.length - 1] && coordinates[coordinates.length - 1];\n      const previous = coordinates[coordinates.length - 2] && coordinates[coordinates.length - 2];\n      const currentTime = current && current.utc;\n\n      if (currentTime) {\n        setDuration((currentTime - startTime) / 1000);\n      }\n\n      if (current && previous) {\n        const currentDistance = computeDistanceBetween(new LatLng(current.latitude, current.longitude), new LatLng(previous.latitude, previous.longitude));\n        setSpeed(currentDistance / 1609.344 * 60 * 60);\n        setDistance(distance + currentDistance);\n      } //console.log(coordinates);\n\n    }\n  }, 1000);\n  return __jsx(Page, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, __jsx(FullPage, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, __jsx(Center, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, __jsx(InfoText, {\n    isRunning: isRunning,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, \"Paused\")), __jsx(Timer, {\n    time: duration,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }), __jsx(Speed, {\n    speed: speed,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }), __jsx(Distance, {\n    meters: distance,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }), __jsx(Center, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, __jsx(StartStop, {\n    isRunning: isRunning,\n    toggle: setIsRunning,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }), __jsx(Link, {\n    href: \"/finished\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }, __jsx(Button, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }, \"Stop\"))))), __jsx(Console, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }, __jsx(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  }, \"-------------\"), __jsx(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }, \"|  Nerd Shit |\"), __jsx(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }, \"-------------\"), coordinates.map((x, i) => {\n    const pointer = coordinates[coordinates.length - 1 - i];\n    return __jsx(\"li\", {\n      key: pointer.utc,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, \"Lat: \", pointer.latitude, \" | Lng: \", pointer.longitude, \" | UTC: \", pointer.utc);\n  })));\n};\n\nconst InfoText = styled.p`\n    visibility: ${props => props.isRunning ? \"hidden\" : \"visible\"};\n    color: ${props => props.theme.green};\n    text-transform: uppercase;\n    font-size: 18px;\n`;\nconst Button = styled.button`\n    padding: 10px 30px ;\n    background: none;\n    color: ${props => props.theme.green};\n    border: solid 1px ${props => props.theme.green};\n    margin: 15px;\n    font-family: sans-serif;\n    font-size: 18px;\n    text-transform: uppercase;\n    border-radius: 2px;\n`;\nconst Center = styled.div`\n    display: flex;\n    justify-content: center;\n`;\nconst ButtonLink = styled.a`\n    display: block;\n    padding: 10px 30px ;\n    border: none;\n    background: ${props => props.theme.green};\n    font-family: sans-serif;\n    font-size: 14px;\n`;\nconst Console = styled.ul`\n    background: #16103a;\n    min-height: 500px;\n    max-height: 500px;\n    overflow: scroll;\n    margin-block-start: 0;\n    padding-inline-start: 0;\n    li {\n        font-size: 8px;\n        color: #fff;\n        list-style-type: none;\n        font-family: monospace;\n        padding: 0;\n    }\n`;\nexport default Running;","map":{"version":3,"sources":["/Users/nicbovee/Projects/PrismaDemo/frontend/pages/running.tsx"],"names":["Page","Link","Timer","useState","useEffect","useRef","styled","computeDistanceBetween","LatLng","Distance","Speed","FullPage","getCoordinates","arr","callback","response","options","enableHighAccuracy","timeout","maximumAge","success","pos","crd","coords","console","log","latitude","longitude","accuracy","altitude","altitudeAccuracy","heading","speed","utc","error","err","warn","code","message","navigator","geolocation","getCurrentPosition","sampleData","StartStop","props","isRunning","toggle","useInterval","delay","savedCallback","current","tick","id","setInterval","clearInterval","Running","startTime","setStartTime","coordinates","setCoordinates","setIsRunning","duration","setDuration","setSpeed","distance","setDistance","length","previous","currentTime","currentDistance","map","x","i","pointer","InfoText","p","theme","green","Button","button","Center","div","ButtonLink","a","Console","ul"],"mappings":"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","sourcesContent":["import Page from \"../templates/Page\";\nimport Link from \"next/link\";\nimport Timer from \"../components/Timer\";\nimport MileCounter from \"../components/MileCounter\";\nimport { useState, useEffect, Dispatch, SetStateAction, useRef } from 'react';\nimport styled from \"../components/styles/theme\";\nimport { computeDistanceBetween, LatLng } from \"spherical-geometry-js\";\nimport Distance from \"../components/Distance\";\nimport Speed from \"../components/Speed\";\nimport FullPage from \"../components/FullPage\";\n\nconst getCoordinates: (arr: Coordinates[], callback: (arr: Coordinates[]) => void) => void = (arr, callback) => {\n    \n    let response = null;\n    var options = {\n        enableHighAccuracy: true,\n        timeout: 1000,\n        maximumAge: 0\n    };\n\n    function success(pos: any) {\n        let crd: Coordinates = pos.coords;\n        console.log(crd);\n        response = {\n            latitude: crd.latitude,\n            longitude: crd.longitude,\n            accuracy: crd.accuracy,\n            altitude: crd.altitude,\n            altitudeAccuracy: crd.altitudeAccuracy,\n            heading: crd.heading,\n            speed: crd.speed,\n            utc: Date.now()\n        } as Coordinates\n        callback([...arr, response]);\n        return;\n    }\n      \n    function error(err: any) {\n        console.warn(`ERROR(${err.code}): ${err.message}`);\n    }\n\n    navigator.geolocation.getCurrentPosition(success, error, options);\n}\n\ninterface Coordinates {\n    latitude: number;\n    longitude: number;\n    utc: number;\n    altitude?: number | null;\n    accuracy?: number;\n    altitudeAccuracy?: number | null;\n    heading?: number | null;\n    speed?: number | null;\n}\n\nconst sampleData: Coordinates[] = [\n    {\n        latitude: 39.0067718,\n        longitude: -105.06114945,\n        utc: 1567956461422\n    },\n    {\n        latitude: 39.0069154,\n        longitude: -105.0603721,\n        utc: 1567956490407\n    },\n    {\n        latitude: 38.9993031,\n        longitude: -105.0402898,\n        utc: 1567958139410\n    }\n]\ninterface StartStopProps {\n    isRunning: boolean,\n    toggle: Dispatch<SetStateAction<boolean>>\n}\n\nconst StartStop = (props: StartStopProps) => {\n    const { isRunning, toggle } = props;\n    return (\n        isRunning \n            ? <Button onClick={() => toggle(false)}>Pause</Button>\n            : <Button onClick={() => toggle(true)}>Start</Button>\n    )\n}\nfunction useInterval(callback: any, delay: any) {\n    const savedCallback = useRef() as any;\n  \n    // Remember the latest callback.\n    useEffect(() => {\n      savedCallback.current = callback;\n    }, [callback]);\n  \n    // Set up the interval.\n    useEffect(() => {\n      function tick() {\n        savedCallback.current();\n      }\n      if (delay !== null) {\n        let id = setInterval(tick, delay);\n        return () => clearInterval(id);\n      }\n    }, [delay]);\n  }\n\nconst Running = () => {\n    const [startTime, setStartTime] = useState(Date.now());\n    const [coordinates, setCoordinates] = useState([] as Coordinates[]);\n    const [isRunning, setIsRunning] = useState(true);\n    const [duration, setDuration]  = useState(0);\n    const [speed, setSpeed] = useState(0);\n    const [distance, setDistance] = useState(0);\n\n    useInterval(() => {\n        if(isRunning) {\n            getCoordinates(coordinates, setCoordinates);\n            const current = coordinates[coordinates.length-1] && coordinates[coordinates.length-1]\n            const previous = coordinates[coordinates.length-2] && coordinates[coordinates.length-2]\n\n            const currentTime = current && current.utc;\n            if(currentTime) {\n                setDuration((currentTime - startTime) / 1000);\n            }\n\n           \n\n            if(current && previous){\n                const currentDistance = computeDistanceBetween(new LatLng(current.latitude, current.longitude), new LatLng(previous.latitude, previous.longitude));\n                setSpeed((currentDistance / 1609.344) * 60 * 60);\n                \n                setDistance(distance + currentDistance);\n\n            }\n           \n            //console.log(coordinates);\n\n        } \n    }, 1000)\n\n    \n\n    return (\n        <Page>\n            <FullPage>\n                <div>\n                    <Center>\n                        <InfoText isRunning={isRunning}>Paused</InfoText>\n                    </Center>\n                    <Timer time={duration}/>\n                    <Speed speed={speed}/>\n                    <Distance meters={distance} />\n                    <Center>\n                        <StartStop isRunning={isRunning} toggle={setIsRunning}/>\n                        <Link href=\"/finished\"><Button>Stop</Button></Link>\n                    </Center>\n                </div>\n            </FullPage>\n            <Console>\n                <li>-------------</li>\n                <li>|  Nerd Shit |</li>\n                <li>-------------</li>\n            {\n                coordinates.map((x,i) => {\n                    const pointer = coordinates[coordinates.length - 1 -i];\n                    return <li key={pointer.utc}>Lat: {pointer.latitude} | Lng: {pointer.longitude} | UTC: {pointer.utc}</li>\n                })\n            }\n            </Console>\n        </Page>\n    )\n}\n\ninterface InfoProps {\n    isRunning: boolean;\n}\nconst InfoText = styled.p<InfoProps>`\n    visibility: ${props => props.isRunning ? \"hidden\" : \"visible\"};\n    color: ${props => props.theme.green};\n    text-transform: uppercase;\n    font-size: 18px;\n`\n\nconst Button = styled.button`\n    padding: 10px 30px ;\n    background: none;\n    color: ${props => props.theme.green};\n    border: solid 1px ${props => props.theme.green};\n    margin: 15px;\n    font-family: sans-serif;\n    font-size: 18px;\n    text-transform: uppercase;\n    border-radius: 2px;\n`;\n\nconst Center = styled.div`\n    display: flex;\n    justify-content: center;\n`\n\nconst ButtonLink = styled.a`\n    display: block;\n    padding: 10px 30px ;\n    border: none;\n    background: ${props => props.theme.green};\n    font-family: sans-serif;\n    font-size: 14px;\n`;\nconst Console = styled.ul`\n    background: #16103a;\n    min-height: 500px;\n    max-height: 500px;\n    overflow: scroll;\n    margin-block-start: 0;\n    padding-inline-start: 0;\n    li {\n        font-size: 8px;\n        color: #fff;\n        list-style-type: none;\n        font-family: monospace;\n        padding: 0;\n    }\n`;\n\n\nexport default Running"]},"metadata":{},"sourceType":"module"}
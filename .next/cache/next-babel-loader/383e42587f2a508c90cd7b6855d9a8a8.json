{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Page from \"../templates/Page\";\nimport Link from \"next/link\";\nimport Timer from \"../components/Timer\";\nimport MileCounter from \"../components/MileCounter\";\nimport { useState, useEffect, useRef } from 'react';\n\nvar getCoordinates = function getCoordinates(arr, callback) {\n  var response = null;\n  var options = {\n    enableHighAccuracy: true,\n    timeout: 1000,\n    maximumAge: 0\n  };\n\n  function success(pos) {\n    var crd = pos.coords;\n    response = {\n      lat: crd.latitude,\n      lng: crd.longitude,\n      utc: _Date$now()\n    };\n    callback([].concat(_toConsumableArray(arr), [response]));\n    return;\n  }\n\n  function error(err) {\n    console.warn(\"ERROR(\".concat(err.code, \"): \").concat(err.message));\n  }\n\n  navigator.geolocation.getCurrentPosition(success, error, options);\n};\n\nvar StartStop = function StartStop(props) {\n  var isRunning = props.isRunning,\n      toggle = props.toggle;\n  return isRunning ? __jsx(\"a\", {\n    onClick: function onClick() {\n      return toggle(false);\n    }\n  }, \"Pause\") : __jsx(\"a\", {\n    onClick: function onClick() {\n      return toggle(true);\n    }\n  }, \"Start\");\n};\n\nfunction useInterval(callback, delay) {\n  var savedCallback = useRef(); // Remember the latest callback.\n\n  useEffect(function () {\n    savedCallback.current = callback;\n  }, [callback]); // Set up the interval.\n\n  useEffect(function () {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      var id = setInterval(tick, delay);\n      return function () {\n        return clearInterval(id);\n      };\n    }\n  }, [delay]);\n}\n\nvar startTime = _Date$now();\n\nvar Running = function Running() {\n  var _useState = useState([]),\n      coordinates = _useState[0],\n      setCoordinates = _useState[1];\n\n  var _useState2 = useState(true),\n      isRunning = _useState2[0],\n      setIsRunning = _useState2[1];\n\n  var _useState3 = useState(0),\n      duration = _useState3[0],\n      setDuration = _useState3[1];\n\n  useInterval(function () {\n    if (isRunning) {\n      getCoordinates(coordinates, setCoordinates);\n      var currentTime = coordinates[coordinates.length - 1] && coordinates[coordinates.length - 1].utc;\n\n      if (currentTime) {\n        setDuration((currentTime - startTime) / 1000);\n      }\n\n      console.log(coordinates); //console.log(coordinates);\n    }\n  }, 1000);\n  return __jsx(Page, null, __jsx(\"h1\", null, \"Run!\"), __jsx(MileCounter, null), __jsx(Timer, {\n    time: duration\n  }), __jsx(StartStop, {\n    isRunning: isRunning,\n    toggle: setIsRunning\n  }), __jsx(Link, {\n    href: \"/finished\"\n  }, __jsx(\"a\", null, \"Stop\")));\n};\n\nexport default Running;","map":null,"metadata":{},"sourceType":"module"}